{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","components/TechButton/index.js","components/TechFilter/index.js","components/Skills/index.js"],"names":["_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","TechButton","name","link","svg","type","useState","classType","setClassType","useEffect","href","target","rel","className","src","alt","TechFilter","handleDevFilter","handleDesignFilter","handleLearnFilter","devFilterActive","designFilterActive","learnFilterActive","onClick","gsap","registerPlugin","ScrollTrigger","Skills","tech","techArray","setTechArray","setDevFilterActive","setDesignFilterActive","setLearnFilterActive","activeSelector","selector","skillTitleRef","useRef","introTxtRef","saveStyles","tl","timeline","matchMedia","current","duration","autoAlpha","y","ease","scrollTrigger","trigger","toggleActions","start","end","scrub","kill","Container","ref","Row","Col","lg","filter","techType","includes","map","technology","key"],"mappings":"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","file":"static/js/5.e61cde1e.chunk.js","sourcesContent":["import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, { useState, useEffect } from 'react';\nimport './style.css';\n\n\n// This is static top section of the page and gives it semantic value.\nfunction TechButton({ name, link, svg, type }) {\n\n    // State to determine the css class type\n    const [classType, setClassType ] = useState(\"hello\");\n\n    useEffect(() => {\n      if(type === \"dev\") {\n        setClassType(\"tech-btn__btn--dev\");\n      } else if (type === \"design\") {\n        setClassType(\"tech-btn__btn--design\");\n      } else {\n        setClassType(\"tech-btn__btn--learn\")\n      }\n    }, [type])\n\n\n\n    return (\n\n        <a href={link}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className={`tech-btn__btn ${classType}`}\n        >\n            <img src={svg} alt={name} className={`tech-btn__icon`} />\n            {name}\n        </a>\n\n\n\n    )\n}\n\n\nexport default TechButton;","import React from 'react';\nimport './style.css';\n\n\nfunction TechFilter({ handleDevFilter, handleDesignFilter, handleLearnFilter, devFilterActive, designFilterActive, learnFilterActive }) {\n\n\n  return (\n\n    <div className=\"tech-filter__container\">\n      <div className=\"tech-filter__nav\">\n\n\n        <button className={`tech-filter__nav-dev ${devFilterActive ? \"tech-filter__nav-dev--active\" : null}`}\n          onClick={handleDevFilter}>\n          Coding\n        </button>\n\n\n\n\n        <button className={`tech-filter__nav-design ${designFilterActive ? \"tech-filter__nav-design--active\" : null}`}\n          onClick={handleDesignFilter}>\n          Design\n        </button>\n\n\n\n        <button className={`tech-filter__nav-learn ${learnFilterActive ? \"tech-filter__nav-learn--active\" : null}`}\n          onClick={handleLearnFilter}>\n          Learning\n          </button>\n\n      </div>\n    </div>\n\n\n\n  )\n}\n\n\nexport default TechFilter;","import React, { useState, useEffect, useRef } from 'react';\nimport './style.css';\nimport TechButton from '../TechButton';\nimport TechFilter from '../TechFilter';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport tech from '../../utils/tech.json';\nimport { gsap } from \"gsap\";\nimport { ScrollTrigger } from 'gsap/ScrollTrigger';\ngsap.registerPlugin(ScrollTrigger);\n\nfunction Skills() {\n\n    // State to hold which buttons to show\n    const [techArray, setTechArray] = useState(tech);\n\n    // State that determines if a filter has been clicked\n    const [devFilterActive, setDevFilterActive] = useState(false);\n    const [designFilterActive, setDesignFilterActive] = useState(false);\n    const [learnFilterActive, setLearnFilterActive] = useState(false);\n\n\n\n    // Helper function to make setting the active states DRYer\n    const activeSelector = (selector) => {\n        switch (selector) {\n            case \"dev\":\n                setDevFilterActive(true);\n                setDesignFilterActive(false);\n                setLearnFilterActive(false);\n                break;\n            case \"design\":\n                setDevFilterActive(false);\n                setDesignFilterActive(true);\n                setLearnFilterActive(false);\n                break;\n            case \"learn\":\n                setDevFilterActive(false);\n                setDesignFilterActive(false);\n                setLearnFilterActive(true);\n                break;\n            default:\n                setDevFilterActive(false);\n                setDesignFilterActive(false);\n                setLearnFilterActive(false);\n        }\n    }\n\n\n    // Function to show just the developer tool buttons\n    const handleDevFilter = () => {\n\n        // Checks if nav is already active \n        if (devFilterActive === false) {\n\n            // Sets Dev State to Active and turns the other's off\n            activeSelector(\"dev\")\n\n            // Filters out all buttons excepts the dev type\n            setTechArray([...tech].filter(techType =>\n                techType.type.includes(\"dev\")\n            ))\n\n        } else {\n\n            // Replaces array with the original selection of buttons\n            setTechArray(tech);\n\n            // Removes active styling\n            setDevFilterActive(false);\n        }\n    }\n\n\n\n    // Function to show just the Design tool buttons\n    const handleDesignFilter = () => {\n\n        // Checks if nav is already active \n        if (designFilterActive === false) {\n\n            // Sets Design State to Active and turns the other's off\n            activeSelector(\"design\")\n\n            // Filters out all buttons excepts the design type\n            setTechArray([...tech].filter(techType =>\n                techType.type.includes(\"design\")\n            ))\n\n        } else {\n\n            // Replaces array with the original selection of buttons\n            setTechArray(tech);\n\n            // Removes active styling\n            setDesignFilterActive(false);\n        }\n    }\n\n\n\n    // Function to show just the Learn tool buttons\n    const handleLearnFilter = () => {\n\n        // Checks if nav is already active \n        if (learnFilterActive === false) {\n\n            // // Sets Learn State to Active and turns the other's off\n            activeSelector(\"learn\")\n\n\n            // Filters out all buttons excepts the learn type\n            setTechArray([...tech].filter(techType =>\n                techType.type.includes(\"learn\")\n            ))\n\n        } else {\n\n            // Replaces array with the original selection of buttons\n            setTechArray(tech);\n\n            // Removes active styling\n            setLearnFilterActive(false);\n        }\n    }\n\n\n    // Ref for Skill Title\n    const skillTitleRef = useRef(null);\n\n    // Ref for Lead Text\n    const introTxtRef = useRef(null);\n\n\n\n\n\n    // Save Initial Styles\n    ScrollTrigger.saveStyles(\"h2, .skills__intro-text, .skills__tech-container\");\n\n\n    // GSAP ANIMATIONS\n    useEffect(() => {\n\n\n        const tl = gsap.timeline();\n\n        ScrollTrigger.matchMedia({\n\n            \"(min-width: 768px)\": function () {\n\n                tl.from(skillTitleRef.current, {\n                    duration: 1,\n                    autoAlpha: 0,\n                    y: 50,\n                    ease: \"expo.out\",\n                    scrollTrigger: {\n                        trigger: skillTitleRef.current,\n                        toggleActions: 'play none none none',\n                        start: 'top bottom',\n                        end: '-=50',\n                        scrub: true\n                    },\n                })\n\n                tl.from(introTxtRef.current, {\n                    duration: 1,\n                    autoAlpha: 0,\n                    y: -30,\n                    ease: 'power4.out',\n                    scrollTrigger: {\n                        trigger: introTxtRef.current,\n                        toggleActions: 'play none none none',\n                        start: 'top bottom',\n                        end: '-=50',\n                        scrub: true\n                    },\n\n                });\n\n\n\n                // Kill animations \n                return function () {\n                    tl.kill();\n                };\n            }\n        });\n\n    }, []);\n\n\n    return (\n        <section>\n            <Container className=\"g__about-sections\">\n                <h2 ref={skillTitleRef}>Skills</h2>\n\n                <Row className=\"justify-content-md-center g_negative-margin\">\n                    <Col lg={8}>\n                        <p className=\"skills__intro-text g__body-lg\"\n                            ref={introTxtRef}>These are some of the tools I use on projects or currently learning.</p>\n                    </Col>\n                </Row>\n                <Row className=\"justify-content-md-center\">\n                    <Col lg={12} className=\"skills__tech-container\" >\n\n                        <TechFilter\n                            devFilterActive={devFilterActive}\n                            designFilterActive={designFilterActive}\n                            learnFilterActive={learnFilterActive}\n                            handleDevFilter={handleDevFilter}\n                            handleDesignFilter={handleDesignFilter}\n                            handleLearnFilter={handleLearnFilter}\n\n                        />\n\n                        <div className=\"skills__tech-btn-container\" >\n                            {techArray.map(technology => (\n                                <TechButton\n                                    key={technology.name}\n                                    name={technology.name}\n                                    link={technology.link}\n                                    svg={technology.svg}\n                                    type={technology.type}\n\n\n                                />\n                            ))}\n                        </div>\n\n                    </Col>\n                </Row>\n\n            </Container>\n\n        </section>\n    )\n}\n\n\nexport default Skills;"],"sourceRoot":""}