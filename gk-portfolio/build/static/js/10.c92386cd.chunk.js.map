{"version":3,"sources":["components/home/DevProjectCard/DevProjectCard.js","components/home/DevPortfolio/DevPortfolio.js"],"names":["CustomToggle","children","eventKey","useState","cardSlide","setCardSlide","decoratedOnClick","useAccordionToggle","onClick","className","gsap","registerPlugin","ScrollTrigger","DevProjectCard","img","title","tech","deployLink","repoLink","techStyler","split","forEach","element","push","key","uuidv4","devCardsRef","useRef","useEffect","saveStyles","current","animateIn","timeline","scrollTrigger","trigger","start","end","scrub","toggleActions","matchMedia","clear","from","duration","opacity","y","scale","ease","kill","ref","Accordion","Card","src","alt","Collapse","Body","href","target","rel","DevPortfolio","devTitleRef","fromTo","autoAlpha","delay","Container","Row","projects","map","project","name"],"mappings":"iPAWA,SAASA,EAAT,GAA+C,IAAvBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,SAAY,EAGRC,oBAAS,GAHD,mBAGnCC,EAHmC,KAGxBC,EAHwB,KAQpCC,EAAmBC,YAAmBL,GAAU,WAChBG,GAAjCD,MAGL,OACI,4BACII,QAASF,EACTG,UAAS,+CAA0CL,EAAY,kBAAoB,KAElFH,GAnBbS,IAAKC,eAAeC,KA2JLC,MA/Hf,YAAqE,IAA3CC,EAA0C,EAA1CA,IAAKC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,WAAYC,EAAY,EAAZA,SAI9CC,EAAa,GACAH,EAAKI,MAAM,MACnBC,SAAQ,SAAAC,GACfH,EAAWI,KAAK,wBAAIC,IAAKC,cAAUhB,UAAU,sBAAsBa,OAQvE,IAAMI,EAAcC,iBAAO,MAiD3B,OA7CAC,qBAAU,WAGNhB,IAAciB,WAAWH,EAAYI,SAErC,IAAIC,EAAYrB,IAAKsB,SAAS,CAC1BC,cAAe,CACXC,QAASR,EAAYI,QACrBK,MAAO,aACPC,IAAK,OACLC,OAAO,EACPC,cAAe,yBAMvB1B,IAAc2B,WAAW,CAGrB,qBAAsB,WAalB,OAZAR,EAAUS,QAEVT,EAAUU,KAAKf,EAAYI,QAAS,CAChCY,SAAU,EACVC,QAAS,EACTC,EAAG,IACHC,MAAO,GACPC,KAAM,eAKH,WACHf,EAAUgB,aAOvB,IAKC,yBAAKtC,UAAU,8CAA8CuC,IAAKtB,GAC9D,kBAACuB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,yBAAKzC,UAAU,2BACX,kBAACT,EAAD,CAAcE,SAAS,KAGnB,yBAAKiD,IAAKrC,EAAKsC,IAAKrC,EAAON,UAAU,gCAG7C,yBAAKA,UAAU,gDAGX,kBAACwC,EAAA,EAAUI,SAAX,CAAoBnD,SAAS,KACzB,kBAACgD,EAAA,EAAKI,KAAN,KACI,wBAAI7C,UAAU,sBAAsBM,GAIpC,yBAAKN,UAAU,sBACTQ,EAAoB,uBAAGsC,KAAMtC,EAC3BuC,OAAO,SACPC,IAAI,sBAAsBhD,UAAYS,EACgB,gDAAlD,iDACJ,kBAAC,IAAD,MACA,8CALW,KAQbA,EAAkB,uBAAGqC,KAAMrC,EACzBsC,OAAO,SACPC,IAAI,sBAAsBhD,UAAYQ,EACgB,gDAAlD,iDACJ,kBAAC,IAAD,MACA,0CALS,MASjB,yBAAKR,UAAU,qBACVU,U,QC7EtBuC,UArDf,WAII,IAAMC,EAAchC,iBAAO,MAsB3B,OAnBAC,qBAAU,WAENlB,IAAKkD,OACDD,EAAY7B,QACZ,CACI+B,UAAW,EACXjB,EAAG,IAEP,CACIiB,UAAW,EACXjB,EAAG,EACHE,KAAM,OACNgB,MAAO,MAIhB,IAIC,iCACI,kBAACC,EAAA,EAAD,KACI,wBAAIf,IAAKW,GAAT,UAEA,kBAACK,EAAA,EAAD,CAAKvD,UAAU,4CAEVwD,EAASC,KAAI,SAAAC,GAAO,OACjB,kBAAC,EAAD,CACI3C,IAAK2C,EAAQC,KAAOD,EAAQrD,IAC5BA,IAAKqD,EAAQrD,IACbC,MAAOoD,EAAQpD,MACfC,KAAMmD,EAAQnD,KACdC,WAAYkD,EAAQlD,WACpBC,SAAUiD,EAAQjD,mB","file":"static/js/10.c92386cd.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport './devProjectCard.css';\nimport { FaGithub, FaDesktop } from 'react-icons/fa';\nimport { v4 as uuidv4 } from 'uuid';\nimport Accordion from 'react-bootstrap/Accordion'\nimport Card from 'react-bootstrap/Card'\nimport { useAccordionToggle } from 'react-bootstrap/AccordionToggle';\nimport { gsap } from \"gsap\";\nimport { ScrollTrigger } from 'gsap/ScrollTrigger';\ngsap.registerPlugin(ScrollTrigger);\n\nfunction CustomToggle({ children, eventKey }) {\n\n\n    const [cardSlide, setCardSlide] = useState(false);\n\n\n    // Expands Accordion and Reveals Thumbnail\n    // ==================================================================\n    const decoratedOnClick = useAccordionToggle(eventKey, () => {\n        !cardSlide ? setCardSlide(true) : setCardSlide(false);\n    });\n\n    return (\n        <button\n            onClick={decoratedOnClick}\n            className={`g_card-slide dev-project--full-width ${cardSlide ? \"g_card-slide-up\" : \"\"}`}\n        >\n            {children}\n        </button>\n    );\n}\n\n\n\n// Dev Project Component.\n// ==================================================================\nfunction DevProjectCard({ img, title, tech, deployLink, repoLink }) {\n\n\n    // Styles tech text to be separates words in pill shapes\n    const techStyler = []\n    const styledTech = tech.split(\", \")\n    styledTech.forEach(element => {\n        techStyler.push(<h5 key={uuidv4()} className=\"dev-project__tech \">{element}</h5>)\n\n    });\n\n\n\n\n    // Ref for title pin border\n    const devCardsRef = useRef(null);\n\n\n    // GSAP ANIMATIONS\n    useEffect(() => {\n\n        // Save Initial Styles\n        ScrollTrigger.saveStyles(devCardsRef.current);\n\n        let animateIn = gsap.timeline({\n            scrollTrigger: {\n                trigger: devCardsRef.current,\n                start: 'top bottom',\n                end: '-=50',\n                scrub: true,\n                toggleActions: 'play none none none'\n            }\n        });\n\n\n        // Media Query Animation\n        ScrollTrigger.matchMedia({\n\n            // Desktop animation only\n            \"(min-width: 768px)\": function () {\n                animateIn.clear();\n\n                animateIn.from(devCardsRef.current, {\n                    duration: 2,\n                    opacity: 0,\n                    y: 100,\n                    scale: .8,\n                    ease: 'power4.out'\n                });\n\n\n                // Kill animations \n                return function () {\n                    animateIn.kill();\n                };\n            },\n\n\n        });\n\n    }, [])\n\n\n\n    return (\n        <div className=\"g_projects-container dev-project__min-width\" ref={devCardsRef}>\n            <Accordion>\n                <Card>\n                    <div className=\"neumorphism force-width\">\n                        <CustomToggle eventKey=\"0\">\n\n\n                            <img src={img} alt={title} className=\"g_project-img force-width\" />\n                        </CustomToggle>\n                    </div>\n                    <div className=\"g_meta-container dev-project__meta-container\">\n\n\n                        <Accordion.Collapse eventKey=\"0\">\n                            <Card.Body>\n                                <h4 className=\"dev-project__title\">{title}</h4>\n\n\n\n                                <div className=\"dev-project__links\">\n                                    {!deployLink ? null : <a href={deployLink}\n                                        target=\"_blank\"\n                                        rel=\"noopener noreferrer\" className={!repoLink ?\n                                            \"dev-project__button dev-project__button--full\" : \"dev-project__button dev-project__button--half\"}>\n                                        <FaDesktop />\n                                        <h5>View Deployed</h5>\n                                    </a>}\n\n                                    {!repoLink ? null : <a href={repoLink}\n                                        target=\"_blank\"\n                                        rel=\"noopener noreferrer\" className={!deployLink ?\n                                            \"dev-project__button dev-project__button--full\" : \"dev-project__button dev-project__button--half\"}>\n                                        <FaGithub />\n                                        <h5>View Repo</h5>\n                                    </a>}\n                                </div>\n\n                                <div className=\"dev-project__info\">\n                                    {techStyler}\n                                </div>\n                            </Card.Body>\n                        </Accordion.Collapse>\n                    </div>\n\n\n                </Card>\n\n            </Accordion>\n\n\n\n\n\n\n\n        </div>\n\n\n    )\n}\n\n\nexport default DevProjectCard;\n","import React, { useEffect, useRef } from \"react\";\nimport './devPortfolio.css';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport DevProjectCard from '../DevProjectCard/DevProjectCard';\nimport projects from '../../../utils/projects.json';\nimport { gsap } from \"gsap\";\n\n\n// This is static top section of the page and gives it semantic value.\nfunction DevPortfolio() {\n\n\n    // Ref for title pin border\n    const devTitleRef = useRef(null);\n\n    // GSAP ANIMATIONS\n    useEffect(() => {\n\n        gsap.fromTo(\n            devTitleRef.current,\n            {\n                autoAlpha: 0,\n                y: 50\n            },\n            {\n                autoAlpha: 1,\n                y: 0,\n                ease: \"expo\",\n                delay: 1\n            });\n\n\n    }, [])\n\n\n    return (\n        <section>\n            <Container>\n                <h2 ref={devTitleRef}>Coding</h2>\n\n                <Row className=\"justify-content-around g_negative-margin\">\n\n                    {projects.map(project => (\n                        <DevProjectCard\n                            key={project.name + project.img}\n                            img={project.img}\n                            title={project.title}\n                            tech={project.tech}\n                            deployLink={project.deployLink}\n                            repoLink={project.repoLink}\n                        />\n                    ))}\n\n                </Row>\n\n            </Container>\n\n        </section>\n    )\n}\n\n\nexport default DevPortfolio;"],"sourceRoot":""}