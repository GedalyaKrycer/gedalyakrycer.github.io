{"version":3,"sources":["components/ContactForm/index.js"],"names":["gsap","registerPlugin","ScrollTrigger","ContactForm","useState","errMsg","setErrMsg","executing","setExecuting","formValues","setFormValues","formReset","setFormReset","loaded","setLoaded","msgSent","setMsgSent","rcError","setRcError","isSubmitting","setIsSubmitting","token","setToken","verified","setVerified","rcRef","useRef","useEffect","a","data","options","method","headers","qs","stringify","url","axios","message","handleSubmit","onError","console","log","onExpire","resetReCaptcha","onVerify","resetEverything","resetForm","current","reset","contactTitle1Ref","saveStyles","timeline","scrollTrigger","trigger","toggleActions","start","end","fromTo","y","className","id","ref","lg","initialValues","email","name","validate","values","errors","test","onSubmit","execute","data-netlify","data-netlify-honeypot","data-netlify-recaptcha","noValidate","type","htmlFor","component","sitekey","onLoad","size","onClick","disabled","renderButton","href"],"mappings":"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","file":"static/js/8.7456f78f.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport { ErrorMessage, Field, Form, Formik } from \"formik\";\nimport Reaptcha from \"reaptcha\";\nimport axios from \"axios\";\nimport qs from \"qs\";\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport './style.css';\nimport { gsap } from \"gsap\";\nimport { ScrollTrigger } from 'gsap/ScrollTrigger';\ngsap.registerPlugin(ScrollTrigger);\n\n\n\n\n\n// This is static top section of the page and gives it semantic value.\nfunction ContactForm() {\n\n    // START Code Copied From https://github.com/kimfucious/netlify-forms-formik/blob/master/src/FormikForm.js#L7\n    //\n    const [errMsg, setErrMsg] = useState(\"\");\n    const [executing, setExecuting] = useState(false);\n    const [formValues, setFormValues] = useState({});\n    const [formReset, setFormReset] = useState({});\n    const [loaded, setLoaded] = useState(false);\n    const [msgSent, setMsgSent] = useState(false);\n    const [rcError, setRcError] = useState(\"\");\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    const [token, setToken] = useState(\"\");\n    const [verified, setVerified] = useState(false);\n\n    const rcRef = useRef(null);\n\n\n    useEffect(() => {\n        const handleSubmit = async (formValues, token) => {\n            const data = {\n                ...formValues,\n                \"g-recaptcha-response\": token\n            };\n            const options = {\n                method: \"POST\",\n                headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n                data: qs.stringify(data),\n                url: \"/\"\n            };\n            try {\n                await axios(options);\n                setMsgSent(true);\n                formReset();\n            } catch (e) {\n                setErrMsg(e.message);\n            }\n        };\n        if (token) {\n            handleSubmit(formValues, token);\n        }\n    }, [formReset, formValues, token]);\n\n    const onError = () => {\n        console.log(\"error...\");\n        setRcError(true);\n    };\n\n    const onExpire = () => {\n        console.log(\"expired...\");\n        console.log(\"resetting...\");\n        resetReCaptcha();\n    };\n\n    const onLoad = resetForm => {\n        console.log(\"loaded...\");\n        setLoaded(true);\n        setFormReset(resetForm);\n    };\n\n    const onVerify = token => {\n        console.log(\"verified...\");\n        setToken(token);\n        setVerified(true);\n        setExecuting(false);\n    };\n\n    const renderButton = (executing, isSubmitting) => {\n        if (errMsg) {\n            return (\n                <button\n                    className=\"contact__submit-btn mt-3\"\n                    type=\"submit\"\n                    disabled\n                >\n                    Error\n                </button>\n            );\n        } else if (msgSent) {\n            return (\n                <button\n                    className=\"contact__submit-btn mt-3\"\n                    type=\"submit\"\n                    disabled\n                >\n                    Submitted\n                </button>\n            );\n        } else {\n            return (\n                <button\n                    className=\"contact__submit-btn mt-3\"\n                    type=\"submit\"\n                    disabled={isSubmitting || executing}\n                >\n                    Submit\n                </button>\n            );\n        }\n    };\n\n    const resetEverything = resetForm => {\n        if (rcError) {\n            setRcError(false);\n        }\n        if (resetForm) {\n            setMsgSent(false);\n            setErrMsg(false);\n            resetForm();\n        }\n        resetReCaptcha();\n    };\n\n    const resetReCaptcha = async () => {\n        console.log(\"resetting...\");\n        await rcRef.current.reset();\n        setVerified(false);\n    };\n\n    // END Code Copied From https://github.com/kimfucious/netlify-forms-formik/blob/master/src/FormikForm.js#L7\n    //\n\n\n    // GSAP —————————————————————————————————————————————————————————————————\n\n    // Ref for Contact title \n    const contactTitle1Ref = useRef(null);\n\n\n    // GSAP Specific useEffect\n    useEffect(() => {\n\n        // Save Initial Styles\n        ScrollTrigger.saveStyles(contactTitle1Ref.current);\n\n        let animateIn = gsap.timeline({\n            scrollTrigger: {\n                trigger: contactTitle1Ref.current,\n                toggleActions: 'play none none reverse',\n                start: 'top 70%',\n                end: '-=50'\n            }\n        });\n\n        animateIn.fromTo(contactTitle1Ref.current, {\n            y: 50\n\n        },\n            {\n                y: 0\n\n            }\n\n        );\n\n    }, [])\n\n\n\n    return (\n        <section>\n            <Container className=\"g__about-sections\" id=\"contact\">\n                <h2 className=\"contact__title\" ref={contactTitle1Ref}>Contact</h2>\n                <Row className=\"justify-content-md-center g_negative-margin\">\n                    <Col className=\"white-color\" lg={8}>\n                        <div className=\"contact__form-bg\">\n\n                            <Formik\n                                initialValues={{\n                                    \"bot-field\": \"\",\n                                    \"form-name\": \"contact\",\n                                    email: \"\",\n                                    name: \"\",\n                                    message: \"\"\n                                }}\n                                validate={values => {\n                                    let errors = {};\n                                    if (!values.email) {\n                                        errors.email = \"Required\";\n                                    } else if (\n                                        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n                                    ) {\n                                        errors.email = \"Invalid email address\";\n                                    }\n                                    if (!values.name) {\n                                        errors.name = \"Required\";\n                                    }\n                                    if (!values.message) {\n                                        errors.message = \"Required\";\n                                    }\n                                    return errors;\n                                }}\n                                onSubmit={values => {\n                                    setIsSubmitting(true);\n                                    setFormValues({ ...values });\n                                    setExecuting(true);\n                                    rcRef.current.execute();\n                                }}\n                            >\n                                {({ resetForm }) => (\n                                    <Form\n                                        data-netlify=\"true\"\n                                        data-netlify-honeypot=\"bot-field\"\n                                        data-netlify-recaptcha=\"true\"\n                                        className=\"d-flex flex-column\"\n                                        name=\"contact\"\n                                        noValidate\n                                    >\n                                        <Field type=\"hidden\" name=\"form-name\" />\n                                        <Field type=\"hidden\" name=\"bot-field\" />\n                                        <div className=\"form-group\">\n                                            <label\n                                                className=\"col-form-label col-form-label-lg\"\n                                                htmlFor=\"name\"\n                                            >\n                                                Name\n                                        </label>\n                                            <Field\n                                                className=\"form-control form-control-lg\"\n                                                name=\"name\"\n                                                type=\"text\"\n                                            />\n                                            <ErrorMessage\n                                                className=\"invalid-feedback\"\n                                                name=\"name\"\n                                                component=\"div\"\n                                            />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label\n                                                className=\"col-form-label col-form-label-lg\"\n                                                htmlFor=\"email\"\n                                            >\n                                                Email\n                                        </label>\n                                            <Field\n                                                className=\"form-control form-control-lg\"\n                                                name=\"email\"\n                                                type=\"email\"\n                                            />\n                                            <ErrorMessage\n                                                className=\"invalid-feedback\"\n                                                name=\"email\"\n                                                component=\"div\"\n                                            />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label\n                                                className=\"col-form-label col-form-label-lg\"\n                                                htmlFor=\"message\"\n                                            >\n                                                Message\n                                        </label>\n                                            <Field\n                                                className=\"form-control form-control-lg\"\n                                                name=\"message\"\n                                                component=\"textarea\"\n                                            />\n                                            <ErrorMessage\n                                                className=\"invalid-feedback\"\n                                                name=\"message\"\n                                                component=\"div\"\n                                            />\n                                        </div>\n                                        <Reaptcha\n                                            ref={rcRef}\n                                            sitekey=\"6LdZTMMZAAAAAGJy0j2AyImgkQ33Mv4juhtQElid\"\n                                            data-netlify-recaptcha=\"true\"\n                                            onError={onError}\n                                            onExpire={onExpire}\n                                            onVerify={onVerify}\n                                            onLoad={() => onLoad(() => resetForm)}\n                                            size=\"invisible\"\n                                        />\n                                        <div className=\"m-2 col-form-label col-form-label-lg hidden\">\n                                            <span\n                                                className={`badge badge-${loaded ? \"success\" : \"primary\"\n                                                    } mx-2 p-2`}\n                                            >\n                                                loaded\n              </span>\n                                            <span\n                                                className={`badge badge-${verified ? \"success\" : \"primary\"\n                                                    } mx-2 p-2`}\n                                            >\n                                                verified\n              </span>\n                                            {executing && (\n                                                <span className={`badge badge-primary mx-2 p-2`}>\n                                                    executing\n                                                </span>\n                                            )}\n                                            {rcError && (\n                                                <span className={`badge badge-primary mx-2 p-2`}>error</span>\n                                            )}\n                                            {rcError && (\n                                                <button\n                                                    className=\"btn btn-link text-dark\"\n                                                    onClick={() => resetEverything(resetForm)}\n                                                >\n                                                    reset\n                                                </button>\n                                            )}\n                                        </div>\n                                        {renderButton(isSubmitting, executing, verified)}\n                                        {errMsg ? <div className=\"text-primary m-1\">{errMsg}</div> : null}\n                                        {(msgSent || errMsg) && (\n                                            <button className=\"contact__reset-btn\"\n\n                                                onClick={() => resetEverything(resetForm)}\n                                            >\n                                                Send A New Email\n                                            </button>\n                                        )}\n                                    </Form>\n                                )}\n                            </Formik>\n                        </div>\n                    </Col>\n                </Row>\n\n                <div className=\"contact__email-container\">\n                    <h2 className=\"contact__or-title\">or</h2>\n                    <div className=\"contact__email-txt\">\n                        <p className=\"g__body-lg\">You can email me at</p>\n\n                        <p>\n                            <a href=\"mailto:gedalya@krycer.com\"\n                                className=\"g__body-lg\">\n                                gedalya@krycer.com\n                        </a>\n                        </p>\n                    </div>\n\n                </div>\n            </Container>\n\n        </section >\n    )\n}\n\n\nexport default ContactForm;"],"sourceRoot":""}