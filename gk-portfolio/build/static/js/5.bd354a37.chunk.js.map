{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","components/about/TechButton/TechButton.js","components/about/TechFilter/TechFilter.js","components/about/TechContainer/TechContainer.js"],"names":["_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","TechButton","name","link","svg","type","useState","classType","setClassType","useEffect","href","target","rel","className","src","alt","TechFilter","handleDevFilter","handleDesignFilter","handleLearnFilter","devFilterActive","designFilterActive","learnFilterActive","onClick","gsap","registerPlugin","ScrollTrigger","TechContainer","tech","techArray","setTechArray","setDevFilterActive","setDesignFilterActive","setLearnFilterActive","activeSelector","selector","techTitleRef","useRef","introTxtRef","techButtonsRef","saveStyles","current","animateIn","timeline","scrollTrigger","trigger","toggleActions","start","end","fromTo","autoAlpha","y","ease","Container","ref","Row","Col","lg","filter","techType","includes","map","technology","key"],"mappings":"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","file":"static/js/5.bd354a37.chunk.js","sourcesContent":["import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, { useState, useEffect } from 'react';\nimport './techButton.css';\n\n\n// This is static top section of the page and gives it semantic value.\nfunction TechButton({ name, link, svg, type }) {\n\n    // State to determine the css class type\n    const [classType, setClassType ] = useState(\"\");\n\n    useEffect(() => {\n      if(type === \"dev\") {\n        setClassType(\"tech-btn__btn--dev\");\n      } else if (type === \"design\") {\n        setClassType(\"tech-btn__btn--design\");\n      } else {\n        setClassType(\"tech-btn__btn--learn\")\n      }\n    }, [type])\n\n\n\n    return (\n\n        <a href={link}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className={`tech-btn__btn ${classType}`}\n        >\n            <img src={svg} alt={name} className={`tech-btn__icon`} />\n            {name}\n        </a>\n\n\n\n    )\n}\n\n\nexport default TechButton;\n","import React from 'react';\nimport './techFilter.css';\n\n\nfunction TechFilter({ handleDevFilter, handleDesignFilter, handleLearnFilter, devFilterActive, designFilterActive, learnFilterActive }) {\n\n\n  return (\n\n    <div className=\"tech-filter__container\">\n      <div className=\"tech-filter__nav\">\n\n\n        <button className={`tech-filter__nav-dev ${devFilterActive ? \"tech-filter__nav-dev--active\" : null}`}\n          onClick={handleDevFilter}>\n          Coding\n        </button>\n\n\n\n\n        <button className={`tech-filter__nav-design ${designFilterActive ? \"tech-filter__nav-design--active\" : null}`}\n          onClick={handleDesignFilter}>\n          Design\n        </button>\n\n\n\n        <button className={`tech-filter__nav-learn ${learnFilterActive ? \"tech-filter__nav-learn--active\" : null}`}\n          onClick={handleLearnFilter}>\n          Learning\n          </button>\n\n      </div>\n    </div>\n\n\n\n  )\n}\n\n\nexport default TechFilter;","import React, { useState, useEffect, useRef } from 'react';\nimport './techContainer.css';\nimport TechButton from '../TechButton/TechButton';\nimport TechFilter from '../TechFilter/TechFilter';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport tech from '../../../utils/tech.json';\nimport { gsap } from \"gsap\";\nimport { ScrollTrigger } from 'gsap/ScrollTrigger';\ngsap.registerPlugin(ScrollTrigger);\n\n\nfunction TechContainer() {\n\n    // State to hold which buttons to show\n    const [techArray, setTechArray] = useState(tech);\n\n    // State that determines if a filter has been clicked\n    const [devFilterActive, setDevFilterActive] = useState(false);\n    const [designFilterActive, setDesignFilterActive] = useState(false);\n    const [learnFilterActive, setLearnFilterActive] = useState(false);\n\n\n\n    // Helper function to make setting the active states DRYer\n    const activeSelector = (selector) => {\n        switch (selector) {\n            case \"dev\":\n                setDevFilterActive(true);\n                setDesignFilterActive(false);\n                setLearnFilterActive(false);\n                break;\n            case \"design\":\n                setDevFilterActive(false);\n                setDesignFilterActive(true);\n                setLearnFilterActive(false);\n                break;\n            case \"learn\":\n                setDevFilterActive(false);\n                setDesignFilterActive(false);\n                setLearnFilterActive(true);\n                break;\n            default:\n                setDevFilterActive(false);\n                setDesignFilterActive(false);\n                setLearnFilterActive(false);\n        }\n    }\n\n\n    // Function to show just the developer tool buttons\n    const handleDevFilter = () => {\n\n        // Checks if nav is already active \n        if (devFilterActive === false) {\n\n            // Sets Dev State to Active and turns the other's off\n            activeSelector(\"dev\")\n\n            // Filters out all buttons excepts the dev type\n            setTechArray([...tech].filter(techType =>\n                techType.type.includes(\"dev\")\n            ))\n\n        } else {\n\n            // Replaces array with the original selection of buttons\n            setTechArray(tech);\n\n            // Removes active styling\n            setDevFilterActive(false);\n        }\n    }\n\n\n    // Function to show just the Design tool buttons\n    const handleDesignFilter = () => {\n\n        // Checks if nav is already active \n        if (designFilterActive === false) {\n\n            // Sets Design State to Active and turns the other's off\n            activeSelector(\"design\")\n\n            // Filters out all buttons excepts the design type\n            setTechArray([...tech].filter(techType =>\n                techType.type.includes(\"design\")\n            ))\n\n        } else {\n\n            // Replaces array with the original selection of buttons\n            setTechArray(tech);\n\n            // Removes active styling\n            setDesignFilterActive(false);\n        }\n    }\n\n\n\n    // Function to show just the Learn tool buttons\n    const handleLearnFilter = () => {\n\n        // Checks if nav is already active \n        if (learnFilterActive === false) {\n\n            // // Sets Learn State to Active and turns the other's off\n            activeSelector(\"learn\")\n\n\n            // Filters out all buttons excepts the learn type\n            setTechArray([...tech].filter(techType =>\n                techType.type.includes(\"learn\")\n            ))\n\n        } else {\n\n            // Replaces array with the original selection of buttons\n            setTechArray(tech);\n\n            // Removes active styling\n            setLearnFilterActive(false);\n        }\n    }\n\n\n    // Ref for Tech Title\n    const techTitleRef = useRef(null);\n\n    // Ref for Lead Text\n    const introTxtRef = useRef(null);\n\n    // Ref for Tech Buttons\n    const techButtonsRef = useRef(null);\n\n\n\n    // GSAP ANIMATIONS\n    useEffect(() => {\n\n        // Save Initial Styles\n        ScrollTrigger.saveStyles([\n            techTitleRef.current,\n            introTxtRef.current,\n            techButtonsRef.current\n        ]);\n\n\n        let animateIn = gsap.timeline({\n            scrollTrigger: {\n                trigger: techTitleRef.current,\n                toggleActions: 'play none none none',\n                start: 'bottom bottom',\n                end: '-=50'\n            }\n        });\n\n        animateIn.fromTo(techTitleRef.current, {\n            autoAlpha: 0,\n            y: 100\n        },\n            {\n                autoAlpha: 1,\n                y: 0,\n                ease: \"expo.out\"\n            })\n\n        animateIn.fromTo(introTxtRef.current, {\n            autoAlpha: 0,\n            y: 0\n\n        },\n            {\n                autoAlpha: 1,\n                y: -20,\n                ease: \"expo.out\"\n            }\n\n        );\n\n        animateIn.fromTo(techButtonsRef.current, {\n            autoAlpha: 0,\n            y: 0\n\n        },\n            {\n                autoAlpha: 1,\n                y: -20,\n                ease: \"expo.out\"\n            }\n\n        );\n\n    }, []);\n\n\n    return (\n        <section>\n            <Container className=\"g__about-sections\">\n                <h2 ref={techTitleRef}>Tech</h2>\n\n                <Row className=\"justify-content-md-center g_negative-margin\">\n                    <Col lg={8}>\n                        <p className=\"techContainer__intro-text g__body-lg\"\n                            ref={introTxtRef}\n                        >These are some of the tools I use on projects or currently learning.</p>\n                    </Col>\n                </Row>\n                <div ref={techButtonsRef}>\n                    <div className=\"techContainer__tech-wrapper\"\n                    >\n\n                        <TechFilter\n                            devFilterActive={devFilterActive}\n                            designFilterActive={designFilterActive}\n                            learnFilterActive={learnFilterActive}\n                            handleDevFilter={handleDevFilter}\n                            handleDesignFilter={handleDesignFilter}\n                            handleLearnFilter={handleLearnFilter}\n\n                        />\n\n                        <div className=\"techContainer__tech-btn-container\" >\n                            {techArray.map(technology => (\n                                <TechButton\n                                    key={technology.name}\n                                    name={technology.name}\n                                    link={technology.link}\n                                    svg={technology.svg}\n                                    type={technology.type}\n\n\n                                />\n                            ))}\n                        </div>\n\n                    </div>\n                </div>\n\n            </Container>\n\n        </section>\n    )\n}\n\n\nexport default TechContainer;"],"sourceRoot":""}